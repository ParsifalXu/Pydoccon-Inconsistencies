[
    {
        "lib": "scikit-learn",
        "sha": "395761a76397a560303f00d3db24a50a00ca11ed",
        "issue_sha": "395761a76397a560303f00d3db24a50a00ca11ed",
        "issue_type": "logic",
        "granularity": "class",
        "filepath": "sklearn/preprocessing/_discretization.py",
        "docfrom": "KBinsDiscretizer",
        "class": "KBinsDiscretizer",
        "func": "fit",
        "exec_func": "fit",
        "params": ["sample_weight", "strategy"],
        "constraints": "(strategy = 'uniform') -> (sample_weight != 'None')",
        "oracle": "True",
        "cancheck": "able"
    },
    {
        "lib": "scikit-learn",
        "sha": "131109b0037ec71e4a4f262b888e198d58e38f24",
        "issue_sha": "395761a76397a560303f00d3db24a50a00ca11ed",
        "issue_type": "logic",
        "granularity": "class",
        "filepath": "sklearn/preprocessing/_discretization.py",
        "docfrom": "KBinsDiscretizer",
        "class": "KBinsDiscretizer",
        "func": "fit",
        "exec_func": "fit",
        "params": ["sample_weight", "strategy"],
        "constraints": "(strategy = 'quantile') -> (sample_weight != 'None')",
        "oracle": "False",
        "cancheck": "able"
    },
    {
        "lib": "scikit-learn",
        "sha": "483fafe5d1a27446a8f05a0d9bb3762de47b1618",
        "issue_sha": "10997c94fd19f999b3d257b137f7722af0bd6fd8",
        "issue_type": "logic",
        "granularity": "class",
        "filepath": "sklearn/preprocessing/_data.py",
        "docfrom": "StandardScaler",
        "class": "StandardScaler",
        "func": "partial_fit",
        "exec_func": "partial_fit",
        "params": ["with_mean", "mean_"],
        "constraints": "(with_mean = 'False') -> (mean_ = 'None')",
        "oracle": "True",
        "cancheck": "able"
    },
    {
        "lib": "scikit-learn",
        "sha": "10997c94fd19f999b3d257b137f7722af0bd6fd8",
        "issue_sha": "10997c94fd19f999b3d257b137f7722af0bd6fd8",
        "issue_type": "logic",
        "granularity": "class",
        "filepath": "sklearn/preprocessing/_data.py",
        "docfrom": "StandardScaler",
        "class": "StandardScaler",
        "func": "partial_fit",
        "exec_func": "partial_fit",
        "params": ["with_mean", "mean_"],
        "constraints": "((with_mean = 'False') ^ (with_std = 'False')) -> (mean_ = 'None')",
        "oracle": "True",
        "cancheck": "able"
    },
    {
        "lib": "scikit-learn",
        "sha": "767d3555a51a4d9279ca47c9426df8b6418da8ce",
        "issue_sha": "8409b877fdf3212cd9ed65c7868202961a777a20",
        "issue_type": "value",
        "granularity": "class",
        "filepath": "sklearn/feature_selection/_sequential.py",
        "docfrom": "SequentialFeatureSelector",
        "class": "SequentialFeatureSelector",
        "func": "fit",
        "exec_func": "fit",
        "params": ["n_features_to_select", "tol"],
        "constraints": "(n_features_to_select = 'warn') -> (tol != 'None')",
        "oracle": "False",
        "cancheck": "able"
    },
    {
        "lib": "scikit-learn",
        "sha": "8409b877fdf3212cd9ed65c7868202961a777a20",
        "issue_sha": "8409b877fdf3212cd9ed65c7868202961a777a20",
        "issue_type": "value",
        "granularity": "class",
        "filepath": "sklearn/feature_selection/_sequential.py",
        "docfrom": "SequentialFeatureSelector",
        "class": "SequentialFeatureSelector",
        "func": "fit",
        "exec_func": "fit",
        "params": ["n_features_to_select", "tol"],
        "constraints": "(n_features_to_select = 'auto') -> (tol != 'None')",
        "oracle": "True",
        "cancheck": "able"
    },
    {
        "lib": "scikit-learn",
        "sha": "7e8d3c505baafa45bd94d9e28ee3d35141ff91c4",
        "issue_sha": "451f2121eab19dd25c337192a89d8c1582664d89",
        "issue_type": "value",
        "granularity": "func",
        "filepath": "sklearn/metrics/_ranking.py",
        "docfrom": "roc_auc_score",
        "class": "NA",
        "func": "roc_auc_score",
        "exec_func": "_multiclass_roc_auc_score",
        "params": ["average", "multi_class"],
        "constraints": "(multi_class = 'ovo') -> (average = 'None')",
        "oracle": "False",
        "cancheck": "unable"
    },
    {
        "lib": "scikit-learn",
        "sha": "451f2121eab19dd25c337192a89d8c1582664d89",
        "issue_sha": "451f2121eab19dd25c337192a89d8c1582664d89",
        "issue_type": "value",
        "granularity": "func",
        "filepath": "sklearn/metrics/_ranking.py",
        "docfrom": "roc_auc_score",
        "class": "NA",
        "func": "roc_auc_score",
        "exec_func": "_multiclass_roc_auc_score",
        "params": ["average", "multi_class"],
        "constraints": "(multi_class = 'ovr') -> (average = 'None')",
        "oracle": "True",
        "cancheck": "unable"
    },
    {
        "lib": "scikit-learn",
        "sha": "07bc459be26c7d83d5c980553a853b136ca19c71",
        "issue_sha": "beea7838cc8ec61c78255bd9c8b400997e30db32",
        "issue_type": "removec",
        "granularity": "class",
        "filepath": "sklearn/linear_model/_ridge.py",
        "docfrom": "RidgeClassifierCV",
        "class": "_RidgeGCV",
        "func": "fit",
        "exec_func": "fit",
        "params": ["store_cv_values", "cv_values_"],
        "constraints": "(store_cv_values = 'True') -> (cv_values_ != 'None')",
        "oracle": "True",
        "cancheck": "unable"
    },
    {
        "lib": "scikit-learn",
        "sha": "a0ba256dbe9380b5d2cf9cee133482fc87768267",
        "issue_sha": "a0ba256dbe9380b5d2cf9cee133482fc87768267",
        "issue_type": "addc",
        "granularity": "class",
        "filepath": "sklearn/ensemble/_bagging.py",
        "docfrom": "BaggingClassifier",
        "class": "BaseBagging",
        "func": "_fit",
        "exec_func": "_fit",
        "params": ["oob_score", "bootstrap"],
        "constraints": "(bootstrap = 'True') -> (oob_score != 'None')",
        "oracle": "True",
        "cancheck": "unable"
    },
    {
        "lib": "scikit-learn",
        "sha": "7404a82891ef82c525ec61c76090f12424670a44",
        "issue_sha": "7404a82891ef82c525ec61c76090f12424670a44",
        "issue_type": "addc",
        "granularity": "func",
        "filepath": "sklearn/decomposition/_dict_learning.py",
        "docfrom": "dict_learning",
        "class": "NA",
        "func": "dict_learning",
        "exec_func": "dict_learning",
        "params": ["code_init", "dict_init"],
        "constraints": "(code_init != 'None') ^ (dict_init != 'None')",
        "oracle": "True",
        "cancheck": "able"
    },
    {
        "lib": "scikit-learn",
        "sha": "1e46db669318fe20458d7cf135f6107e19e90970",
        "issue_sha": "1e46db669318fe20458d7cf135f6107e19e90970",
        "issue_type": "modify",
        "granularity": "class",
        "filepath": "sklearn/preprocessing/_data.py",
        "docfrom": "StandardScaler",
        "class": "StandardScaler",
        "func": "partial_fit",
        "exec_func": "partial_fit",
        "params": ["scale_", "with_std"],
        "constraints": "(with_std = 'False') -> (scale_ = 'None')",
        "oracle": "True",
        "cancheck": "able"
    },
    {
        "lib": "scikit-learn",
        "sha": "b5d63e34746ec273c1cbc5992a0477198a22f8be",
        "issue_sha": "b5d63e34746ec273c1cbc5992a0477198a22f8be",
        "issue_type": "addc",
        "granularity": "class",
        "filepath": "sklearn/linear_model/_omp.py",
        "docfrom": "OrthogonalMatchingPursuit",
        "class": "OrthogonalMatchingPursuit",
        "func": "fit",
        "exec_func": "fit",
        "params": ["n_nonzero_coefs_", "tol"],
        "constraints": "(n_nonzero_coefs_ = 'None') ^ (tol = 'None')",
        "oracle": "True",
        "cancheck": "able"
    },
    {
        "lib": "scikit-learn",
        "sha": "53fea53c6f44580738feb6d890f55d7de2fe8cc6",
        "issue_sha": "53fea53c6f44580738feb6d890f55d7de2fe8cc6",
        "issue_type": "modify",
        "granularity": "class",
        "filepath": "sklearn/impute/_base.py",
        "docfrom": "MissingIndicator",
        "class": "MissingIndicator",
        "func": "transform",
        "exec_func": "transform",
        "params": ["error_on_new", "features"],
        "constraints": "(features = 'missing-only') -> (error_on_new != 'None')",
        "oracle": "True",
        "cancheck": "able"
    },
    {
        "lib": "scikit-learn",
        "sha": "5147fd09c6a063188efde444f47bd006fa5f95f0",
        "issue_sha": "5147fd09c6a063188efde444f47bd006fa5f95f0",
        "issue_type": "addc",
        "granularity": "func",
        "filepath": "sklearn/linear_model/sag.py",
        "docfrom": "get_auto_step_size",
        "class": "NA",
        "func": "get_auto_step_size",
        "exec_func": "get_auto_step_size",
        "params": ["is_saga", "n_samples"],
        "constraints": "(is_saga = 'True') -> (n_samples != 'None')",
        "oracle": "True",
        "cancheck": "able"
    },
    {
        "lib": "scikit-learn",
        "sha": "b513081c658317eabafd713d6d5d18f7a5a30a73",
        "issue_sha": "b513081c658317eabafd713d6d5d18f7a5a30a73",
        "issue_type": "addc",
        "granularity": "class",
        "filepath": "sklearn/cluster/_spectral.py",
        "docfrom": "SpectralClustering",
        "class": "SpectralClustering",
        "func": "fit",
        "exec_func": "fit",
        "params": ["affinity", "n_jobs"],
        "constraints": "(affinity = 'nearest_neighbors') -> (n_jobs = 'exist')",
        "oracle": "True",
        "cancheck": "able"
    },
    {
        "lib": "scikit-learn",
        "sha": "b513081c658317eabafd713d6d5d18f7a5a30a73",
        "issue_sha": "b513081c658317eabafd713d6d5d18f7a5a30a73",
        "issue_type": "addc",
        "granularity": "class",
        "filepath": "sklearn/cluster/_spectral.py",
        "docfrom": "SpectralClustering",
        "class": "SpectralClustering",
        "func": "fit",
        "exec_func": "fit",
        "params": ["affinity", "n_jobs"],
        "constraints": "(affinity = 'precomputed_nearest_neighbors') -> (n_jobs = 'exist')",
        "oracle": "True",
        "cancheck": "able"
    },
    {
        "lib": "scikit-learn",
        "sha": "fdce26a61b5e388ee0871f5cb90ec24afc61c074",
        "issue_sha": "fdce26a61b5e388ee0871f5cb90ec24afc61c074",
        "issue_type": "modify",
        "granularity": "class",
        "filepath": "sklearn/semi_supervised/_self_training.py",
        "docfrom": "SelfTrainingClassifier",
        "class": "SelfTrainingClassifier",
        "func": "fit",
        "exec_func": "fit",
        "params": ["criterion", "k_best"],
        "constraints": "(criterion = 'k_best') -> (k_best = 'exist')",
        "oracle": "True",
        "cancheck": "able"
    },
    {
        "lib": "scikit-learn",
        "sha": "20509fb2bcfea6c0d8ccd72535a3289f61c08bb0",
        "issue_sha": "20509fb2bcfea6c0d8ccd72535a3289f61c08bb0",
        "issue_type": "modify",
        "granularity": "class",
        "filepath": "sklearn/impute/_iterative.py",
        "docfrom": "IterativeImputer",
        "class": "IterativeImputer",
        "func": "__init__",
        "exec_func": "__init__",
        "params": ["add_indicator", "indicator_"],
        "constraints": "(add_indicator = 'False') -> (indicator_ = 'None')",
        "oracle": "False",
        "cancheck": "unable"
    },
    {
        "lib": "scikit-learn",
        "sha": "07a9dc93af13849e0521e94981fb5a215500b095",
        "issue_sha": "07a9dc93af13849e0521e94981fb5a215500b095",
        "issue_type": "modify",
        "granularity": "class",
        "filepath": "sklearn/impute/_base.py",
        "docfrom": "SimpleImputer",
        "class": "SimpleImputer",
        "func": "inverse_transform",
        "exec_func": "inverse_transform",
        "params": ["copy", "add_indicator"],
        "constraints": "(add_indicator = 'True') -> (copy = 'False')",
        "oracle": "False",
        "cancheck": "unable"
    },
    {
        "lib": "scikit-learn",
        "sha": "3cde262274a9187fe16c6aeccdcdf9fc433f0fb2",
        "issue_sha": "3cde262274a9187fe16c6aeccdcdf9fc433f0fb2",
        "issue_type": "modify",
        "granularity": "class",
        "filepath": "sklearn/ensemble/_hist_gradient_boosting/gradient_boosting.py",
        "docfrom": "HistGradientBoostingRegressor",
        "class": "HistGradientBoostingRegressor",
        "func": "_encode_y",
        "exec_func": "_encode_y",
        "params": ["loss", "_encode_y"],
        "constraints": "(y >= 0) -> (loss = 'poisson')",
        "oracle": "True",
        "cancheck": "unable"
    },
    {
        "lib": "scikit-learn",
        "sha": "007d11a49f2ad6ffc64aa302565b7b361b1b51b2",
        "issue_sha": "007d11a49f2ad6ffc64aa302565b7b361b1b51b2",
        "issue_type": "modify",
        "granularity": "class",
        "filepath": "sklearn/neural_network/_multilayer_perceptron.py",
        "docfrom": "MLPRegressor",
        "class": "BaseMultilayerPerceptron",
        "func": "_fit_stochastic",
        "exec_func": "_fit_stochastic",
        "params": ["validation_fraction", "early_stpping"],
        "constraints": "(early_stpping = 'True') -> (validation_fraction = 'exist')",
        "oracle": "True",
        "cancheck": "unable"
    },
    {
        "lib": "scikit-learn",
        "sha": "c9d223ccc58e2569b8e67f1d0217dd57a93ec07f",
        "issue_sha": "bc91f01e541de34adf084b07d5154db15cab9b58",
        "issue_type": "modify",
        "granularity": "class",
        "filepath": "sklearn/linear_model/_logistic.py",
        "docfrom": "LogisticRegression",
        "class": "NA",
        "func": "NA",
        "exec_func": "_check_solver",
        "params": ["solver", "penalty"],
        "constraints": "(solver = 'liblinear') -> (penalty != 'None')",
        "oracle": "True",
        "cancheck": "unable"
    },
    {
        "lib": "scikit-learn",
        "sha": "c9d223ccc58e2569b8e67f1d0217dd57a93ec07f",
        "issue_sha": "bc91f01e541de34adf084b07d5154db15cab9b58",
        "issue_type": "modify",
        "granularity": "class",
        "filepath": "sklearn/linear_model/_logistic.py",
        "docfrom": "LogisticRegression",
        "class": "NA",
        "func": "NA",
        "exec_func": "_check_solver",
        "params": ["solver", "penalty"],
        "constraints": "(solver = 'saga') -> (penalty = 'elasticnet')",
        "oracle": "True",
        "cancheck": "unable"
    },
    {
        "lib": "scikit-learn",
        "sha": "c9d223ccc58e2569b8e67f1d0217dd57a93ec07f",
        "issue_sha": "7ed61a24feb4ffde0bee9342acf4a58e3f946a61",
        "issue_type": "modify",
        "granularity": "class",
        "filepath": "sklearn/linear_model/_logistic.py",
        "docfrom": "_logistic_regression_path",
        "class": "NA",
        "func": "NA",
        "exec_func": "_check_multi_class",
        "params": ["solver", "multi_class"],
        "constraints": "(solver = 'liblinear') -> (multi_class != 'multinomial')",
        "oracle": "True",
        "cancheck": "unable"
    },
    {
        "lib": "scikit-learn",
        "sha": "7fa2e6e2734b590d96e62d5932c648a9c1002f34",
        "issue_sha": "7fa2e6e2734b590d96e62d5932c648a9c1002f34",
        "issue_type": "addc",
        "granularity": "func",
        "filepath": "sklearn/cluster/_spectral.py",
        "docfrom": "spectral_clustering",
        "class": "NA",
        "func": "spectral_clustering",
        "exec_func": "spectral_clustering",
        "params": ["assign_labels", "n_init"],
        "constraints": "(assign_labels = 'kmeans') -> (n_init != 'None')",
        "oracle": "True",
        "cancheck": "able"
    },
    {
        "lib": "scikit-learn",
        "sha": "49ec6192326fbe13b347abd9cafeed8e78725df7",
        "issue_sha": "49ec6192326fbe13b347abd9cafeed8e78725df7",
        "issue_type": "modify",
        "granularity": "class",
        "filepath": "sklearn/decomposition/_factor_analysis.py",
        "docfrom": "FactorAnalysis",
        "class": "FactorAnalysis",
        "func": "__init__",
        "exec_func": "__init__",
        "params": ["iterated_power", "svd_method"],
        "constraints": "(svd_method = 'randomized') -> (iterated_power != 'None')",
        "oracle": "True",
        "cancheck": "unable"
    },
    {
        "lib": "scikit-learn",
        "sha": "896d4fad106c8f1d745923d544b44a0707103aa2",
        "issue_sha": "896d4fad106c8f1d745923d544b44a0707103aa2",
        "issue_type": "modify",
        "granularity": "class",
        "filepath": "sklearn/feature_extraction/text.py",
        "docfrom": "TfidfVectorizer",
        "class": "_VectorizerMixin",
        "func": "_warn_for_unused_params",
        "exec_func": "_warn_for_unused_params",
        "params": ["token_pattern", "analyzer"],
        "constraints": "(analyzer = 'word') ^ (token_pattern != 'None')",
        "oracle": "True",
        "cancheck": "able"
    },
    {
        "lib": "scikit-learn",
        "sha": "e7d2a8041bbceb5b11fbb72281a8486ef53347d2",
        "issue_sha": "e7d2a8041bbceb5b11fbb72281a8486ef53347d2",
        "issue_type": "addc",
        "granularity": "class",
        "filepath": "sklearn/svm/_classes.py",
        "docfrom": "LinearSVC",
        "class": "LinearSVC",
        "func": "fit",
        "exec_func": "fit",
        "params": ["penalty", "loss"],
        "constraints": "!((panelty = 'l1') ^ (loss = 'hinge'))",
        "oracle": "False",
        "cancheck": "ubable"
    },
    {
        "lib": "scikit-learn",
        "sha": "a8bf63a8ed6bb86eee1b9d0052da66a6eda4e21c",
        "issue_sha": "a8bf63a8ed6bb86eee1b9d0052da66a6eda4e21c",
        "issue_type": "modify",
        "granularity": "func",
        "filepath": "sklearn/decomposition/_dict_learning.py",
        "docfrom": "_sparse_encode",
        "class": "NA",
        "func": "_sparse_encode",
        "exec_func": "_sparse_encode",
        "params": ["max_iter", "algorithm"],
        "constraints": "(algorithm = 'lasso_cd') -> (max_iter = 'exist')",
        "oracle": "True",
        "cancheck": "able"
    },
    {
        "lib": "scikit-learn",
        "sha": "a8bf63a8ed6bb86eee1b9d0052da66a6eda4e21c",
        "issue_sha": "a8bf63a8ed6bb86eee1b9d0052da66a6eda4e21c",
        "issue_type": "modify",
        "granularity": "func",
        "filepath": "sklearn/decomposition/_dict_learning.py",
        "docfrom": "_sparse_encode",
        "class": "NA",
        "func": "_sparse_encode",
        "exec_func": "_sparse_encode",
        "params": ["max_iter", "algorithm"],
        "constraints": "(algorithm = 'lasso_lars') -> (max_iter = 'exist')",
        "oracle": "True",
        "cancheck": "able"
    },
    {
        "lib": "scikit-learn",
        "sha": "a8bf63a8ed6bb86eee1b9d0052da66a6eda4e21c",
        "issue_sha": "a8bf63a8ed6bb86eee1b9d0052da66a6eda4e21c",
        "issue_type": "modify",
        "granularity": "func",
        "filepath": "sklearn/decomposition/_dict_learning.py",
        "docfrom": "_sparse_encode",
        "class": "NA",
        "func": "_sparse_encode",
        "exec_func": "_sparse_encode",
        "params": ["max_iter", "init"],
        "constraints": "(algorithm = 'lasso_cd') -> (init = 'exist')",
        "oracle": "True",
        "cancheck": "able"
    },
    {
        "lib": "scikit-learn",
        "sha": "a8bf63a8ed6bb86eee1b9d0052da66a6eda4e21c",
        "issue_sha": "a8bf63a8ed6bb86eee1b9d0052da66a6eda4e21c",
        "issue_type": "modify",
        "granularity": "func",
        "filepath": "sklearn/decomposition/_dict_learning.py",
        "docfrom": "_sparse_encode",
        "class": "NA",
        "func": "sparse_encode",
        "exec_func": "sparse_encode",
        "params": ["gram", "method"],
        "constraints": "(method = 'threshold') -> (gram = 'None')",
        "oracle": "True",
        "cancheck": "able"
    },
    {
        "lib": "scikit-learn",
        "sha": "598ed4cbf906e4e39f25c7d4016932cbc0659585",
        "issue_sha": "598ed4cbf906e4e39f25c7d4016932cbc0659585",
        "issue_type": "good",
        "granularity": "func",
        "filepath": "sklearn/decomposition/_dict_learning.py",
        "docfrom": "sparse_encode",
        "class": "NA",
        "func": "sparse_encode",
        "exec_func": "sparse_encode",
        "params": ["n_nonzero_coefs", "algorithm"],
        "constraints": "(n_nonzero_coefs = 'omp') -> (algorithm = 'exist')",
        "oracle": "True",
        "cancheck": "able"
    },
    {
        "lib": "scikit-learn",
        "sha": "598ed4cbf906e4e39f25c7d4016932cbc0659585",
        "issue_sha": "598ed4cbf906e4e39f25c7d4016932cbc0659585",
        "issue_type": "good",
        "granularity": "func",
        "filepath": "sklearn/decomposition/_dict_learning.py",
        "docfrom": "sparse_encode",
        "class": "NA",
        "func": "sparse_encode",
        "exec_func": "sparse_encode",
        "params": ["n_nonzero_coefs", "algorithm"],
        "constraints": "(n_nonzero_coefs = 'lars') -> (algorithm = 'exist')",
        "oracle": "True",
        "cancheck": "able"
    },
    {
        "lib": "scikit-learn",
        "sha": "e4aab357e990e661113e6da97c5c7e939917daf2",
        "issue_sha": "e4aab357e990e661113e6da97c5c7e939917daf2",
        "issue_type": "good",
        "granularity": "class",
        "filepath": "sklearn/decomposition/_dict_learning.py",
        "docfrom": "KernelPCA",
        "class": "KernelPCA",
        "func": "_get_kernel",
        "exec_func": "_get_kernel",
        "params": ["gamma", "kernel"],
        "constraints": "!(kernel = 'rbf' || kernel = 'poly' || kernel = 'sigmoid') -> (gamma = 'ignore')",
        "oracle": "True",
        "cancheck": "ubable"
    },
    {
        "lib": "scikit-learn",
        "sha": "683af6c6b65a7943c7fc28144d4b53e7888c0133",
        "issue_sha": "683af6c6b65a7943c7fc28144d4b53e7888c0133",
        "issue_type": "addc",
        "granularity": "func",
        "filepath": "sklearn/covariance/_graph_lasso.py",
        "docfrom": "graphical_lasso",
        "class": "NA",
        "func": "graphical_lasso",
        "exec_func": "graphical_lasso",
        "params": ["cov_init", "emp_cov"],
        "constraints": "(cov_init = 'None') -> (emp_cov = 'exist')",
        "oracle": "True",
        "cancheck": "able"
    },
    {
        "lib": "scikit-learn",
        "sha": "c115ed715a32a628c77440253a6e3af502e1098d",
        "issue_sha": "c115ed715a32a628c77440253a6e3af502e1098d",
        "issue_type": "good",
        "granularity": "func",
        "filepath": "sklearn/manifold/_locally_linear.py",
        "docfrom": "null_space",
        "class": "NA",
        "func": "null_space",
        "exec_func": "null_space",
        "params": ["max_iter", "eigen_solver"],
        "constraints": "(eigen_solver = 'dense') -> (max_iter != 'exist')",
        "oracle": "True",
        "cancheck": "able"
    }
]

