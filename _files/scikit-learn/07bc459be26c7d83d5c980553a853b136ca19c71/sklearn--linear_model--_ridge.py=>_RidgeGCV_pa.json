{
    "param": {
        "alphas": "ndarray of shape (n_alphas, ), default=(0.1, 1.0, 10.0) Array of alpha values to try. Regularization strength; must be a positive float. Regularization improves the conditioning of the problem and reduces the variance of the estimates. Larger values specify stronger regularization. Alpha corresponds to ``1 / (2C)`` in other linear models such as :class:`~sklearn.linear_model.LogisticRegression` or :class:`~sklearn.svm.LinearSVC`.",
        "fit_intercept": "bool, default=True Whether to calculate the intercept for this model. If set to false, no intercept will be used in calculations (i.e. data is expected to be centered).",
        "normalize": "bool, default=False This parameter is ignored when ``fit_intercept`` is set to False. If True, the regressors X will be normalized before regression by subtracting the mean and dividing by the l2-norm. If you wish to standardize, please use :class:`~sklearn.preprocessing.StandardScaler` before calling ``fit`` on an estimator with ``normalize=False``.  .. deprecated:: 1.0 ``normalize`` was deprecated in version 1.0 and will be removed in 1.2.",
        "scoring": "string, callable, default=None A string (see model evaluation documentation) or a scorer callable object / function with signature ``scorer(estimator, X, y)``.",
        "cv": "int, cross-validation generator or an iterable, default=None Determines the cross-validation splitting strategy. Possible inputs for cv are:  - None, to use the efficient Leave-One-Out cross-validation - integer, to specify the number of folds. - :term:`CV splitter`, - An iterable yielding (train, test) splits as arrays of indices.  Refer :ref:`User Guide <cross_validation>` for the various cross-validation strategies that can be used here.",
        "class_weight": "dict or 'balanced', default=None Weights associated with classes in the form ``{class_label: weight}``. If not given, all classes are supposed to have weight one.  The \"balanced\" mode uses the values of y to automatically adjust weights inversely proportional to class frequencies in the input data as ``n_samples / (n_classes * np.bincount(y))``",
        "store_cv_values": "bool, default=False Flag indicating if the cross-validation values corresponding to each alpha should be stored in the ``cv_values_`` attribute (see below). This flag is only compatible with ``cv=None`` (i.e. using Leave-One-Out Cross-Validation)."
    },
    "attr": {
        "cv_values_": "ndarray of shape (n_samples, n_targets, n_alphas), optional Cross-validation values for each alpha (if ``store_cv_values=True`` and ``cv=None``). After ``fit()`` has been called, this attribute will contain the mean squared errors (by default) or the values of the ``{loss, score}_func`` function (if provided in the constructor). This attribute exists only when ``store_cv_values`` is True.",
        "coef_": "ndarray of shape (1, n_features) or (n_targets, n_features) Coefficient of the features in the decision function.  ``coef_`` is of shape (1, n_features) when the given problem is binary.",
        "intercept_": "float or ndarray of shape (n_targets, ) Independent term in decision function. Set to 0.0 if ``fit_intercept = False``.",
        "alpha_": "float Estimated regularization parameter.",
        "best_score_": "float Score of base estimator with best alpha.  .. versionadded:: 0.23",
        "classes_": "ndarray of shape (n_classes, ) The classes labels.",
        "n_features_in_": "int Number of features seen during :term:`fit`.  .. versionadded:: 0.24"
    },
    "pa": {
        "alphas": "ndarray of shape (n_alphas, ), default=(0.1, 1.0, 10.0) Array of alpha values to try. Regularization strength; must be a positive float. Regularization improves the conditioning of the problem and reduces the variance of the estimates. Larger values specify stronger regularization. Alpha corresponds to ``1 / (2C)`` in other linear models such as :class:`~sklearn.linear_model.LogisticRegression` or :class:`~sklearn.svm.LinearSVC`.",
        "fit_intercept": "bool, default=True Whether to calculate the intercept for this model. If set to false, no intercept will be used in calculations (i.e. data is expected to be centered).",
        "normalize": "bool, default=False This parameter is ignored when ``fit_intercept`` is set to False. If True, the regressors X will be normalized before regression by subtracting the mean and dividing by the l2-norm. If you wish to standardize, please use :class:`~sklearn.preprocessing.StandardScaler` before calling ``fit`` on an estimator with ``normalize=False``.  .. deprecated:: 1.0 ``normalize`` was deprecated in version 1.0 and will be removed in 1.2.",
        "scoring": "string, callable, default=None A string (see model evaluation documentation) or a scorer callable object / function with signature ``scorer(estimator, X, y)``.",
        "cv": "int, cross-validation generator or an iterable, default=None Determines the cross-validation splitting strategy. Possible inputs for cv are:  - None, to use the efficient Leave-One-Out cross-validation - integer, to specify the number of folds. - :term:`CV splitter`, - An iterable yielding (train, test) splits as arrays of indices.  Refer :ref:`User Guide <cross_validation>` for the various cross-validation strategies that can be used here.",
        "class_weight": "dict or 'balanced', default=None Weights associated with classes in the form ``{class_label: weight}``. If not given, all classes are supposed to have weight one.  The \"balanced\" mode uses the values of y to automatically adjust weights inversely proportional to class frequencies in the input data as ``n_samples / (n_classes * np.bincount(y))``",
        "store_cv_values": "bool, default=False Flag indicating if the cross-validation values corresponding to each alpha should be stored in the ``cv_values_`` attribute (see below). This flag is only compatible with ``cv=None`` (i.e. using Leave-One-Out Cross-Validation).",
        "cv_values_": "ndarray of shape (n_samples, n_targets, n_alphas), optional Cross-validation values for each alpha (if ``store_cv_values=True`` and ``cv=None``). After ``fit()`` has been called, this attribute will contain the mean squared errors (by default) or the values of the ``{loss, score}_func`` function (if provided in the constructor). This attribute exists only when ``store_cv_values`` is True.",
        "coef_": "ndarray of shape (1, n_features) or (n_targets, n_features) Coefficient of the features in the decision function.  ``coef_`` is of shape (1, n_features) when the given problem is binary.",
        "intercept_": "float or ndarray of shape (n_targets, ) Independent term in decision function. Set to 0.0 if ``fit_intercept = False``.",
        "alpha_": "float Estimated regularization parameter.",
        "best_score_": "float Score of base estimator with best alpha.  .. versionadded:: 0.23",
        "classes_": "ndarray of shape (n_classes, ) The classes labels.",
        "n_features_in_": "int Number of features seen during :term:`fit`.  .. versionadded:: 0.24"
    }
}