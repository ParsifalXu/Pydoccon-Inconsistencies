Classification using Support Vector Machines.

This class implements the most common classification methods
(C-SVC, Nu-SVC) using support vector machines.

Parameters
----------
impl : string, optional
    SVM implementation to choose from. This refers to different
    formulations of the SVM optimization problem.
    Can be one of 'c_svc', 'nu_svc'. By default 'c_svc' will be chosen.

nu : float, optional
    An upper bound on the fraction of training errors and a lower
    bound of the fraction of support vectors. Should be in the
    interval (0, 1].  By default 0.5 will be taken.  Only
    available if impl='nu_svc'

kernel : string, optional
     Specifies the kernel type to be used in the algorithm.
     one of 'linear', 'poly', 'rbf', 'sigmoid', 'precomputed'.
     If none is given 'rbf' will be used.

degree : int, optional
    degree of kernel function
    is significant only in poly, rbf, sigmoid

gamma : float, optional (default=0.0)
    kernel coefficient for rbf

C : float, optional (default=1.0)
    penalty parameter of the error term of the 

probability: boolean, optional (False by default)
    especify if probability estimates must be enabled
    must be enabled prior to calling prob_predict

coef0 : float, optional

Attributes
----------
`support_` : array-like, shape = [nSV, nfeatures]
    Support vectors.

`dual_coef_` : array, shape = [nclasses-1, nSV]
    Coefficients of the support vector in the decision function.

`coef_` : array, shape = [nclasses-1, nfeatures]
    Weights asigned to the features (coefficients in the primal
    problem). This is only available in the case of linear kernel.

`intercept_` : array, shape = [nclasses-1]
    Constants in decision function.


Methods
-------
fit(X, Y) : self
    Fit the model

predict(X) : array
    Predict using the model.

predict_proba(X) : array
    Return probability estimates.

Examples
--------
>>> X = np.array([[-1, -1], [-2, -1], [1, 1], [2, 1]])
>>> Y = np.array([1, 1, 2, 2])
>>> clf = SVC()
>>> clf.fit(X, Y)    #doctest: +ELLIPSIS
<scikits.learn.svm.SVC object at 0x...>
>>> print clf.predict([[-0.8, -1]])
[ 1.]

See also
--------
SVR