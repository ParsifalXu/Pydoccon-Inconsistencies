{
    "param": {
        "X": "ndarray of shape (n_samples, n_features) Data matrix.",
        "dictionary": "ndarray of shape (n_components, n_features) The dictionary matrix against which to solve the sparse coding of the data. Some of the algorithms assume normalized rows.",
        "gram": "ndarray of shape (n_components, n_components) or None Precomputed Gram matrix, `dictionary * dictionary'` gram can be `None` if method is 'threshold'.",
        "cov": "ndarray of shape (n_components, n_samples), default=None Precomputed covariance, `dictionary * X'`.",
        "algorithm": "{'lasso_lars', 'lasso_cd', 'lars', 'omp', 'threshold'}, default='lasso_lars' The algorithm used:  * `'lars'`: uses the least angle regression method (`linear_model.lars_path`); * `'lasso_lars'`: uses Lars to compute the Lasso solution; * `'lasso_cd'`: uses the coordinate descent method to compute the Lasso solution (`linear_model.Lasso`). lasso_lars will be faster if the estimated components are sparse; * `'omp'`: uses orthogonal matching pursuit to estimate the sparse solution; * `'threshold'`: squashes to zero all coefficients less than regularization from the projection `dictionary * data'`.",
        "regularization": "int or float, default=None The regularization parameter. It corresponds to alpha when algorithm is `'lasso_lars'`, `'lasso_cd'` or `'threshold'`. Otherwise it corresponds to `n_nonzero_coefs`.",
        "init": "ndarray of shape (n_samples, n_components), default=None Initialization value of the sparse code. Only used if `algorithm='lasso_cd'`.",
        "max_iter": "int, default=1000 Maximum number of iterations to perform if `algorithm='lasso_cd'` or `'lasso_lars'`.",
        "copy_cov": "bool, default=True Whether to copy the precomputed covariance matrix; if `False`, it may be overwritten.",
        "check_input": "bool, default=True If `False`, the input arrays `X` and dictionary will not be checked.",
        "verbose": "int, default=0 Controls the verbosity; the higher, the more messages.",
        "positive": "bool, default=False Whether to enforce a positivity constraint on the sparse code.  .. versionadded:: 0.20"
    },
    "attr": {},
    "pa": {
        "X": "ndarray of shape (n_samples, n_features) Data matrix.",
        "dictionary": "ndarray of shape (n_components, n_features) The dictionary matrix against which to solve the sparse coding of the data. Some of the algorithms assume normalized rows.",
        "gram": "ndarray of shape (n_components, n_components) or None Precomputed Gram matrix, `dictionary * dictionary'` gram can be `None` if method is 'threshold'.",
        "cov": "ndarray of shape (n_components, n_samples), default=None Precomputed covariance, `dictionary * X'`.",
        "algorithm": "{'lasso_lars', 'lasso_cd', 'lars', 'omp', 'threshold'}, default='lasso_lars' The algorithm used:  * `'lars'`: uses the least angle regression method (`linear_model.lars_path`); * `'lasso_lars'`: uses Lars to compute the Lasso solution; * `'lasso_cd'`: uses the coordinate descent method to compute the Lasso solution (`linear_model.Lasso`). lasso_lars will be faster if the estimated components are sparse; * `'omp'`: uses orthogonal matching pursuit to estimate the sparse solution; * `'threshold'`: squashes to zero all coefficients less than regularization from the projection `dictionary * data'`.",
        "regularization": "int or float, default=None The regularization parameter. It corresponds to alpha when algorithm is `'lasso_lars'`, `'lasso_cd'` or `'threshold'`. Otherwise it corresponds to `n_nonzero_coefs`.",
        "init": "ndarray of shape (n_samples, n_components), default=None Initialization value of the sparse code. Only used if `algorithm='lasso_cd'`.",
        "max_iter": "int, default=1000 Maximum number of iterations to perform if `algorithm='lasso_cd'` or `'lasso_lars'`.",
        "copy_cov": "bool, default=True Whether to copy the precomputed covariance matrix; if `False`, it may be overwritten.",
        "check_input": "bool, default=True If `False`, the input arrays `X` and dictionary will not be checked.",
        "verbose": "int, default=0 Controls the verbosity; the higher, the more messages.",
        "positive": "bool, default=False Whether to enforce a positivity constraint on the sparse code.  .. versionadded:: 0.20"
    }
}