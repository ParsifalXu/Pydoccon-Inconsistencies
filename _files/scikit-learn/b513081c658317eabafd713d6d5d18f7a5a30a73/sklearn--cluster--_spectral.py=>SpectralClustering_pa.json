{
    "param": {
        "n_clusters": "int, default=8 The dimension of the projection subspace.",
        "eigen_solver": "{'arpack', 'lobpcg', 'amg'}, default=None The eigenvalue decomposition strategy to use. AMG requires pyamg to be installed. It can be faster on very large, sparse problems, but may also lead to instabilities. If None, then ``'arpack'`` is used.",
        "n_components": "int, default=n_clusters Number of eigen vectors to use for the spectral embedding",
        "random_state": "int, RandomState instance, default=None A pseudo random number generator used for the initialization of the lobpcg eigen vectors decomposition when ``eigen_solver='amg'`` and by the K-Means initialization. Use an int to make the randomness deterministic. See :term:`Glossary <random_state>`.",
        "n_init": "int, default=10 Number of time the k-means algorithm will be run with different centroid seeds. The final results will be the best output of n_init consecutive runs in terms of inertia.",
        "gamma": "float, default=1.0 Kernel coefficient for rbf, poly, sigmoid, laplacian and chi2 kernels. Ignored for ``affinity='nearest_neighbors'``.",
        "affinity": "str or callable, default='rbf' How to construct the affinity matrix. - 'nearest_neighbors' : construct the affinity matrix by computing a graph of nearest neighbors. - 'rbf' : construct the affinity matrix using a radial basis function (RBF) kernel. - 'precomputed' : interpret ``X`` as a precomputed affinity matrix. - 'precomputed_nearest_neighbors' : interpret ``X`` as a sparse graph of precomputed nearest neighbors, and constructs the affinity matrix by selecting the ``n_neighbors`` nearest neighbors. - one of the kernels supported by :func:`~sklearn.metrics.pairwise_kernels`.  Only kernels that produce similarity scores (non-negative values that increase with similarity) should be used. This property is not checked by the clustering algorithm.",
        "n_neighbors": "int Number of neighbors to use when constructing the affinity matrix using the nearest neighbors method. Ignored for ``affinity='rbf'``.",
        "eigen_tol": "float, default=0.0 Stopping criterion for eigendecomposition of the Laplacian matrix when ``eigen_solver='arpack'``.",
        "assign_labels": "{'kmeans', 'discretize'}, default='kmeans' The strategy to use to assign labels in the embedding space. There are two ways to assign labels after the laplacian embedding. k-means can be applied and is a popular choice. But it can also be sensitive to initialization. Discretization is another approach which is less sensitive to random initialization.",
        "degree": "float, default=3 Degree of the polynomial kernel. Ignored by other kernels.",
        "coef0": "float, default=1 Zero coefficient for polynomial and sigmoid kernels. Ignored by other kernels.",
        "kernel_params": "dict of str to any, default=None Parameters (keyword arguments) and values for kernel passed as callable object. Ignored by other kernels.",
        "n_jobs": "int, default=None The number of parallel jobs to run when `affinity='nearest_neighbors'` or `affinity='precomputed_nearest_neighbors'`. The neighbors search will be done in parallel. ``None`` means 1 unless in a :obj:`joblib.parallel_backend` context. ``-1`` means using all processors. See :term:`Glossary <n_jobs>` for more details."
    },
    "attr": {
        "affinity_matrix_": "array-like of shape (n_samples, n_samples) Affinity matrix used for clustering. Available only if after calling ``fit``.",
        "labels_": "ndarray of shape (n_samples, ) Labels of each point"
    },
    "pa": {
        "n_clusters": "int, default=8 The dimension of the projection subspace.",
        "eigen_solver": "{'arpack', 'lobpcg', 'amg'}, default=None The eigenvalue decomposition strategy to use. AMG requires pyamg to be installed. It can be faster on very large, sparse problems, but may also lead to instabilities. If None, then ``'arpack'`` is used.",
        "n_components": "int, default=n_clusters Number of eigen vectors to use for the spectral embedding",
        "random_state": "int, RandomState instance, default=None A pseudo random number generator used for the initialization of the lobpcg eigen vectors decomposition when ``eigen_solver='amg'`` and by the K-Means initialization. Use an int to make the randomness deterministic. See :term:`Glossary <random_state>`.",
        "n_init": "int, default=10 Number of time the k-means algorithm will be run with different centroid seeds. The final results will be the best output of n_init consecutive runs in terms of inertia.",
        "gamma": "float, default=1.0 Kernel coefficient for rbf, poly, sigmoid, laplacian and chi2 kernels. Ignored for ``affinity='nearest_neighbors'``.",
        "affinity": "str or callable, default='rbf' How to construct the affinity matrix. - 'nearest_neighbors' : construct the affinity matrix by computing a graph of nearest neighbors. - 'rbf' : construct the affinity matrix using a radial basis function (RBF) kernel. - 'precomputed' : interpret ``X`` as a precomputed affinity matrix. - 'precomputed_nearest_neighbors' : interpret ``X`` as a sparse graph of precomputed nearest neighbors, and constructs the affinity matrix by selecting the ``n_neighbors`` nearest neighbors. - one of the kernels supported by :func:`~sklearn.metrics.pairwise_kernels`.  Only kernels that produce similarity scores (non-negative values that increase with similarity) should be used. This property is not checked by the clustering algorithm.",
        "n_neighbors": "int Number of neighbors to use when constructing the affinity matrix using the nearest neighbors method. Ignored for ``affinity='rbf'``.",
        "eigen_tol": "float, default=0.0 Stopping criterion for eigendecomposition of the Laplacian matrix when ``eigen_solver='arpack'``.",
        "assign_labels": "{'kmeans', 'discretize'}, default='kmeans' The strategy to use to assign labels in the embedding space. There are two ways to assign labels after the laplacian embedding. k-means can be applied and is a popular choice. But it can also be sensitive to initialization. Discretization is another approach which is less sensitive to random initialization.",
        "degree": "float, default=3 Degree of the polynomial kernel. Ignored by other kernels.",
        "coef0": "float, default=1 Zero coefficient for polynomial and sigmoid kernels. Ignored by other kernels.",
        "kernel_params": "dict of str to any, default=None Parameters (keyword arguments) and values for kernel passed as callable object. Ignored by other kernels.",
        "n_jobs": "int, default=None The number of parallel jobs to run when `affinity='nearest_neighbors'` or `affinity='precomputed_nearest_neighbors'`. The neighbors search will be done in parallel. ``None`` means 1 unless in a :obj:`joblib.parallel_backend` context. ``-1`` means using all processors. See :term:`Glossary <n_jobs>` for more details.",
        "affinity_matrix_": "array-like of shape (n_samples, n_samples) Affinity matrix used for clustering. Available only if after calling ``fit``.",
        "labels_": "ndarray of shape (n_samples, ) Labels of each point"
    }
}