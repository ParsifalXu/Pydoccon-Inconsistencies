{
    "param": {
        "a": "array_like Input array, can be complex",
        "s": "sequence of ints, optional Shape (length of each transformed axis) of the output (``s[0]`` refers to axis 0, ``s[1]`` to axis 1, etc.). This corresponds to ``n`` for ``fft(x, n)``. Along each axis, if the given shape is smaller than that of the input, the input is cropped. If it is larger, the input is padded with zeros.  .. versionchanged:: 2.0  If it is ``-1``, the whole input is used (no padding/trimming).  If `s` is not given, the shape of the input along the axes specified by `axes` is used.  .. deprecated:: 2.0  If `s` is not ``None``, `axes` must not be ``None`` either.  .. deprecated:: 2.0  `s` must contain only ``int`` s, not ``None`` values. ``None`` values currently mean that the default value for ``n`` is used in the corresponding 1-D transform, but this behaviour is deprecated.",
        "axes": "sequence of ints, optional Axes over which to compute the FFT.  If not given, the last two axes are used.  A repeated index in `axes` means the transform over that axis is performed multiple times.  A one-element sequence means that a one-dimensional FFT is performed. Default: ``(-2, -1)``.  .. deprecated:: 2.0  If `s` is specified, the corresponding `axes` to be transformed must not be ``None``.",
        "norm": "{\"backward\", \"ortho\", \"forward\"}, optional .. versionadded:: 1.10.0  Normalization mode (see `numpy.fft`). Default is \"backward\". Indicates which direction of the forward/backward pair of transforms is scaled and with what normalization factor.  .. versionadded:: 1.20.0  The \"backward\", \"forward\" values were added."
    },
    "attr": {},
    "pa": {
        "a": "array_like Input array, can be complex",
        "s": "sequence of ints, optional Shape (length of each transformed axis) of the output (``s[0]`` refers to axis 0, ``s[1]`` to axis 1, etc.). This corresponds to ``n`` for ``fft(x, n)``. Along each axis, if the given shape is smaller than that of the input, the input is cropped. If it is larger, the input is padded with zeros.  .. versionchanged:: 2.0  If it is ``-1``, the whole input is used (no padding/trimming).  If `s` is not given, the shape of the input along the axes specified by `axes` is used.  .. deprecated:: 2.0  If `s` is not ``None``, `axes` must not be ``None`` either.  .. deprecated:: 2.0  `s` must contain only ``int`` s, not ``None`` values. ``None`` values currently mean that the default value for ``n`` is used in the corresponding 1-D transform, but this behaviour is deprecated.",
        "axes": "sequence of ints, optional Axes over which to compute the FFT.  If not given, the last two axes are used.  A repeated index in `axes` means the transform over that axis is performed multiple times.  A one-element sequence means that a one-dimensional FFT is performed. Default: ``(-2, -1)``.  .. deprecated:: 2.0  If `s` is specified, the corresponding `axes` to be transformed must not be ``None``.",
        "norm": "{\"backward\", \"ortho\", \"forward\"}, optional .. versionadded:: 1.10.0  Normalization mode (see `numpy.fft`). Default is \"backward\". Indicates which direction of the forward/backward pair of transforms is scaled and with what normalization factor.  .. versionadded:: 1.20.0  The \"backward\", \"forward\" values were added."
    }
}